<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.1.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd">

    <!--
        apache plugin项目地址：https://maven.apache.org/plugins/maven-assembly-plugin/assembly.html
        <id>此程序集的id<id>
        <format>常见的打包文件格式：zip、tar、tar.gz、jar、dir、war等</format>
        <includeBaseDirectory>在最终存档中包含一个基本目录</includeBaseDirectory>
    -->
    <!--生成的根文件夹名称为：pom.xml中finalName定义的前缀 + '-' + 此处的id-->
    <id>web</id>
    <formats>
        <!--打包的文件格式，可以是：dir、war、zip、tar.gz-->
        <format>dir</format>
    </formats>
    <!--是否在target目录下创建一个根文件夹，取名baseDirectory-->
    <includeBaseDirectory>false</includeBaseDirectory>
    <baseDirectory>web-all</baseDirectory>
    <!--指定要包含在程序集中的文件组-->
    <fileSets>
        <fileSet>
            <directory>src/bin</directory>
            <directoryMode>0755</directoryMode>
            <fileMode>0777</fileMode>
            <outputDirectory>bin</outputDirectory>
            <lineEnding>unix</lineEnding>
        </fileSet>
        <fileSet>
            <directory>${filters.envFolder}</directory>
            <excludes>
                <!--根据环境设置排除的目录，若打包为test环境时排除src/main/resources/test/test/**路径-->
                <exclude>test/**</exclude>
                <exclude>prod/**</exclude>
                <!--此文件由下方特殊处理-->
                <exclude>application${filters.envName}.yml</exclude>
            </excludes>
            <outputDirectory>conf</outputDirectory>
        </fileSet>
        <!--创建statics文件夹用于存放静态资源文件-->
        <fileSet>
            <directory>${filters.viewsFolder}/statics</directory>
            <outputDirectory>conf/statics</outputDirectory>
        </fileSet>
        <!--创建templates文件夹用于存放模板资源文件-->
        <fileSet>
            <directory>${filters.viewsFolder}/templates</directory>
            <outputDirectory>conf/templates</outputDirectory>
        </fileSet>
    </fileSets>

    <!--创建文件夹-->
    <files>
        <!-- 重命名资源文件名称，但当文件不存在时报错了，使用copy-rename-maven-plugin插件解决 -->
        <file>
            <source>${filters.envFolder}/application${filters.envName}.yml</source>
            <outputDirectory>conf</outputDirectory>
            <destName>application.yml</destName>
            <filtered>true</filtered>
        </file>
        <!--创建runtime文件夹用于启动命令时指定临时目录-Djava.io.tmpdir-->
        <file>
            <source></source>
            <outputDirectory>runtime</outputDirectory>
        </file>
        <!--创建logs文件夹用于输出日志文件时的根目录-->
        <file>
            <source></source>
            <outputDirectory>logs</outputDirectory>
        </file>
    </files>

    <!--项目依赖的jar配置-->
    <dependencySets>
        <dependencySet>
            <useProjectArtifact>true</useProjectArtifact>
            <outputDirectory>lib-jar</outputDirectory>
            <!--是否解压缩jar文件-->
            <unpack>false</unpack>
            <!--依赖jar文件的范围-->
            <scope>runtime</scope>
            <!--排除项目内的jar-->
            <excludes>
                <exclude>cn.chendd*:*</exclude>
            </excludes>
        </dependencySet>
        <dependencySet>
            <useProjectArtifact>true</useProjectArtifact>
            <outputDirectory>lib-local</outputDirectory>
            <unpack>false</unpack>
            <!--将使用SystemPath依赖的本地jar拷贝至同级目录-->
            <scope>system</scope>
            <!--排除项目内的jar-->
            <excludes>
                <exclude>cn.chendd*:*</exclude>
            </excludes>
        </dependencySet>
        <dependencySet>
            <useProjectArtifact>true</useProjectArtifact>
            <outputDirectory>lib-project</outputDirectory>
            <unpack>false</unpack>
            <includes>
                <include>cn.chendd*:*</include>
            </includes>
        </dependencySet>
    </dependencySets>

</assembly>