# 调度任务实例名称，用于区分特定的调度实例，所有调度实例中唯一
org.quartz.scheduler.instanceName = QuartzScheduler
# ID设置为自动获取 每一个必须不同
org.quartz.scheduler.instanceId = AUTO
# 如果你想quartz-scheduler出口本身通过RMI作为服务器，然后设置“出口”标志true(默认值为false)
org.quartz.scheduler.rmi.export = false
# 如果export和proxy同时指定为true，则export的设置将被忽略
org.quartz.scheduler.rmi.proxy = false
org.quartz.scheduler.wrapJobExecutionInUserTransaction = false
# 配置线程池实现类
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#指定在线程池里面创建的线程是否是守护线程
org.quartz.threadPool.makeThreadsDaemons = true
# 工作线程数量
org.quartz.threadPool.threadCount = 10
# 设置线程的优先级（最大为java.lang.Thread.MAX_PRIORITY 10，最小为Thread.MIN_PRIORITY 1，默认为5）
org.quartz.threadPool.threadPriority = 5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true
# 保存job和Trigger的状态信息到内存中的类 RAMJobStore
# 保存job和Trigger的状态信息到数据库
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
# 数据库代理类，默认使用可以满足大部分数据库
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
# 表的前缀，默认QRTZ_
org.quartz.jobStore.tablePrefix = QUARTZ_
# 是否加入集群
org.quartz.jobStore.isClustered = true
# 检查集群下的其他调度器实体的事件间隔
org.quartz.jobStore.clusterCheckinInterval = 15000
# 在 Trigger 被认为是错过触发之前，Scheduler 还容许 Trigger 通过它的下次触发时间的毫秒数。默认值(假如你未在配置中存在这一属性条目) 是 60000(60 秒)。这个不仅限于 JDBC-JobStore；它也可作为 RAMJobStore 的参数
org.quartz.jobStore.misfireThreshold = 1800
# 设置jdbc数据源信息
#org.quartz.jobStore.dataSource = quartz
#org.quartz.dataSource.quartz.driver = com.mysql.jdbc.Driver
#org.quartz.dataSource.quartz.URL = jdbc:mysql://127.0.0.1:3306/chendd-blog?serverTimezone = UTC&useUnicode = true&characterEncoding = utf-8
#org.quartz.dataSource.quartz.user = root
#org.quartz.dataSource.quartz.password = root
#org.quartz.dataSource.quartz.maxConnections = 5
#org.quartz.dataSource.myDS.validationQuery = select now()

